<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>何时</title>
    <link>https://fucangyu.github.io/</link>
    <description>Recent content on 何时</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 31 Dec 2018 20:47:08 +0800</lastBuildDate>
    
	<atom:link href="https://fucangyu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2018小结</title>
      <link>https://fucangyu.github.io/post/summary-2018/</link>
      <pubDate>Mon, 31 Dec 2018 20:47:08 +0800</pubDate>
      
      <guid>https://fucangyu.github.io/post/summary-2018/</guid>
      <description>2018过完了，马上就就要27了。 27了！！！ 2018是人生中第一个从始至终都在上班的年份，最大的感受就是，时间过的好快啊！ 一、身体： 明显的</description>
    </item>
    
    <item>
      <title>怎么理解异步(2)</title>
      <link>https://fucangyu.github.io/post/how-to-study-async2/</link>
      <pubDate>Sun, 30 Dec 2018 09:23:43 +0800</pubDate>
      
      <guid>https://fucangyu.github.io/post/how-to-study-async2/</guid>
      <description>先回顾一下上一篇文章怎么理解异步(1) 对异步编程来说，需要代码段在把控制权移交给loop时候，保存当前continuation, 以便于事件发</description>
    </item>
    
    <item>
      <title>怎么理解异步?(1)</title>
      <link>https://fucangyu.github.io/post/how-to-study-async/</link>
      <pubDate>Sat, 29 Dec 2018 20:52:03 +0800</pubDate>
      
      <guid>https://fucangyu.github.io/post/how-to-study-async/</guid>
      <description>零 从刚开始学Python到现在，一直对异步都只有一个很模糊的印象。 什么是event_loop，event和loop是到底什么关系？ 具体的业务</description>
    </item>
    
    <item>
      <title>怎么理解CPS?(1)</title>
      <link>https://fucangyu.github.io/post/cps1/</link>
      <pubDate>Sun, 11 Nov 2018 02:19:24 +0800</pubDate>
      
      <guid>https://fucangyu.github.io/post/cps1/</guid>
      <description>这段时间学racket终于遇到了传说中的CPS, 不出意外果然很难理解。先来看一下维基百科中对CPS的定义: In functional programming, continuation-passing style (CPS) is a style of programming in which control is passed explicitly</description>
    </item>
    
    <item>
      <title>Django orm改字段名造成数据丢失</title>
      <link>https://fucangyu.github.io/post/django-orm-change-field-name/</link>
      <pubDate>Sat, 10 Nov 2018 21:34:22 +0800</pubDate>
      
      <guid>https://fucangyu.github.io/post/django-orm-change-field-name/</guid>
      <description>&lt;h3 id=&#34;一-现场&#34;&gt;一. 现场：&lt;/h3&gt;

&lt;p&gt;以为是修改一个变量名，但在django orm内部并不这么认为：&lt;/p&gt;

&lt;p&gt;model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;旧列名：
cos_path = models.CharField(max_length=200, null=True, verbose_name=&amp;#39;存储路径&amp;#39;)

新列名:
storage_path = models.CharField(max_length=200, null=True,verbose_name=&amp;#39;存储路径&amp;#39;)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;migrations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;operations = [
    migrations.RemoveField(
        model_name=&amp;#39;insurancedocument&amp;#39;,
        name=&amp;#39;cos_path&amp;#39;,
    ),
    migrations.AddField(
        model_name=&amp;#39;insurancedocument&amp;#39;,
        name=&amp;#39;storage_path&amp;#39;,
       field=models.CharField(max_length=200, null=True, verbose_name=&amp;#39;存储路径&amp;#39;),
    ),&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;sql:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;BEGIN;
--
-- Remove field cos_path from insurancedocument
--
ALTER TABLE `apis_insurancedocument` DROP COLUMN `cos_path`;
--
-- Add field storage_path to insurancedocument
--
ALTER TABLE `apis_insurancedocument` ADD COLUMN `storage_path` varchar(200) NULL;
COMMIT;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;所以在Django orm里面认为这是删去了一个字段，然后又新增了一个字段，然后数据就丢了。&lt;/p&gt;

&lt;h3 id=&#34;二-其他django改列名手段&#34;&gt;二. 其他django改列名手段&lt;/h3&gt;

&lt;h4 id=&#34;1-利用db-column-改名&#34;&gt;1. 利用db_column 改名&lt;/h4&gt;

&lt;p&gt;操作如下，利用db_column来改变字段名的，然后：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;cos_path = models.CharField(max_length=200, null=True, verbose_name=&amp;#39;存储路径&amp;#39;)

storage_path = models.CharField(max_length=200, null=True, db_column=&amp;#39;cos_path&amp;#39;, verbose_name=&amp;#39;存储路径&amp;#39;)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;BEGIN;
--
-- Remove field cos_path from insurancedocument
--
ALTER TABLE `apis_insurancedocument` DROP COLUMN `cos_path`;
--
-- Add field storage_path to insurancedocument
--
ALTER TABLE `apis_insurancedocument` ADD COLUMN `cos_path` varchar(200) NULL;
COMMIT;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;django orm会先把cos_path那个字段给drop掉，数据还会丢失。&lt;/p&gt;

&lt;h4 id=&#34;2-利用rename-field改名&#34;&gt;2. 利用rename field改名&lt;/h4&gt;

&lt;p&gt;(1) 利用python manage.py makemigrations &amp;ndash;empty apis创建一个新的migrations文件, 编辑：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    dependencies = [
        (&amp;#39;apis&amp;#39;, &amp;#39;0006_auto_20180724_1039&amp;#39;),
    ]

    operations = [
        migrations.AlterField(
            model_name=&amp;#39;insurancedocument&amp;#39;,
            name=&amp;#39;cos_path&amp;#39;,
            field=models.CharField(
                max_length=200, null=True, verbose_name=&amp;#39;存储路径&amp;#39;
            )
        ),
        migrations.RenameField(
            model_name=&amp;#39;insurancedocument&amp;#39;,
            old_name=&amp;#39;cos_path&amp;#39;,
            new_name=&amp;#39;storage_path&amp;#39;,
        ),
    ]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(2)执行的sql语句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;BEGIN;
--
-- Alter field cos_path on insurancedocument
--
--
-- Rename field cos_path on insurancedocument to storage_path
--
ALTER TABLE `apis_insurancedocument` CHANGE `cos_path` `storage_path` varchar(200) NULL;
COMMIT;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这时候django才认为执行的是改名操作， 查看migrate之后的数据库发现数据没有丢失。&lt;/p&gt;

&lt;p&gt;但是这种操作对mysql来说貌似都是重建一张新表，然后把旧表内容插入新表里面，耗时长, 需要停服 而且危险， 所以补充毅总说的一种方法：&lt;/p&gt;

&lt;h4 id=&#34;3-不停服改名&#34;&gt;3 不停服改名&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;先加列，改代码来读老列&amp;amp;&amp;amp;双写，&lt;/li&gt;
&lt;li&gt;通过 sql 或者代码复制原列数据到新列，&lt;/li&gt;
&lt;li&gt;代码再切换成读写新列，&lt;/li&gt;
&lt;li&gt;再做清理老列的事情&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;4-还是不要改名字了&#34;&gt;4 还是不要改名字了&lt;/h4&gt;

&lt;h2 id=&#34;反思&#34;&gt;反思:&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;在线上执行这种需要Schema Operations的事情，确认是否必要&lt;/li&gt;
&lt;li&gt;还是不要用django migration了&lt;/li&gt;
&lt;li&gt;执行sqlmigrate， 确认django orm到底会干什么事情&lt;/li&gt;
&lt;li&gt;本地实验，证明操作无害&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://fucangyu.github.io/post/about/</link>
      <pubDate>Sat, 10 Nov 2018 20:59:00 +0800</pubDate>
      
      <guid>https://fucangyu.github.io/post/about/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;现在北京&lt;/li&gt;
&lt;li&gt;工作中主要使用Python&lt;/li&gt;
&lt;li&gt;脚本工程师，十八线程序员&lt;/li&gt;
&lt;li&gt;在学racket，越来越喜欢这门语言&lt;/li&gt;
&lt;li&gt;正在continuation和macro的坑里面&lt;/li&gt;
&lt;li&gt;对k8s和docker极有兴趣&lt;/li&gt;
&lt;li&gt;越来越胖了&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>