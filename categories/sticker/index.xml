<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sticker on 租块墓地，俯瞰师范学院</title>
    <link>https://fucangyu.github.io/categories/sticker/</link>
    <description>Recent content in sticker on 租块墓地，俯瞰师范学院</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Jan 2019 01:03:13 +0800</lastBuildDate>
    
	<atom:link href="https://fucangyu.github.io/categories/sticker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>一种有意思的死锁</title>
      <link>https://fucangyu.github.io/post/a-interesting-deadlock/</link>
      <pubDate>Thu, 17 Jan 2019 01:03:13 +0800</pubDate>
      
      <guid>https://fucangyu.github.io/post/a-interesting-deadlock/</guid>
      <description>&lt;p&gt;刚闲逛时候发现有&lt;a href=&#34;https://python-gino.readthedocs.io/zh/latest/why.html#the-story&#34;&gt;一篇文章&lt;/a&gt;讲了一种有意思的死锁，不是亲身经历，但是也很有意思了。&lt;/p&gt;

&lt;p&gt;先会议一下死锁的定义是什么？翻出压箱底的&lt;code&gt;现代操作系统&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果一个进程集合中的每个进程都只能等待由该进程集合中的其他进程才能引发的事件，那么，该进程集合就是死锁的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，还是不知道什么是死锁。&lt;/p&gt;

&lt;p&gt;举个例子，&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;比如甲乙两人同时去食堂吃饭，食堂里面只有一个碗和一双筷子，甲抢到了碗，乙抢到了筷子，甲等乙放下筷子，乙等甲放下碗，结果两个人都饿死了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;又比如:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A和B两个进程同时去写数据库，A锁住了第n行去读第m行，B锁住了第m行去读第n行，结果A，B都无限期等下去了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;无论是&lt;code&gt;甲&lt;/code&gt;,&lt;code&gt;乙&lt;/code&gt;,还是&lt;code&gt;A&lt;/code&gt;,&lt;code&gt;B&lt;/code&gt;,都在等待另一个已经死锁的进程释放资源。因为所有的进程都不能运行，所以资源永远无法被释放，所以所有进程都不能被唤醒。进程的数量以及占有和请求的资源数量都是无关紧要的，而无论资源和何种类型都会发生何种结果，所以这种死锁被称为资源死锁。&lt;/p&gt;

&lt;p&gt;好了，抄书结束，划重点。&lt;/p&gt;

&lt;p&gt;好吧，上面这段话都是重点。&lt;/p&gt;

&lt;p&gt;废话👆&lt;/p&gt;

&lt;p&gt;下面看&lt;code&gt;占有和请求的资源数量都是无关紧要的🌰&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For example, the first coroutine starts a transaction and updated a row, then the second coroutine tries to update the same row before the first coroutine closes the transaction. The second coroutine will block the whole thread at the non-async update, waiting for the row lock to be released, but the releasing is in the first coroutine which is blocked by the second coroutine. Thus it will block forever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之前在协程中，每时每刻实际都只有一件事在执行，发生死锁的概率应该不高吧。too young啊&lt;/p&gt;

&lt;p&gt;比如第一个协程发起事务更新数据库中的一行，这时候第二个协程试图更新同一行，如果第二个协程是非异步的更新，那么它就要等待第一个协程释放资源，但是这时候整个线程已经被第二个线程阻塞了，第一个协程无法释放资源，deadlock!&lt;/p&gt;

&lt;p&gt;回忆一下书本中关于资源死锁的四个条件，回忆一下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;互斥条件&lt;/li&gt;
&lt;li&gt;占有和等待条件&lt;/li&gt;
&lt;li&gt;不可抢占条件&lt;/li&gt;
&lt;li&gt;环路等待条件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这四个条件只要有一个不成立那么资源死锁就不会发生。&lt;/p&gt;

&lt;p&gt;好了现在套用一下上面这个例子。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;数据库行锁和当前线程执行都是互斥的，✅&lt;/li&gt;
&lt;li&gt;第一个协程占有了数据库中的锁等待线程执行权，第二个协程占有了当前协程的执行等待行锁，✅&lt;/li&gt;
&lt;li&gt;不可抢占，✅&lt;/li&gt;
&lt;li&gt;环路等待，第二个线程等待行锁，第一个线程等待有机会被执行，✅&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;死锁bingo!&lt;/p&gt;

&lt;p&gt;怎么解决呢？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A simple fix would be to defer the database operations into threads, so that they won&amp;rsquo;t block the main thread, thus won&amp;rsquo;t cause a dead lock easily. It usually works and there is even a library to do so. However when it comes to ORM, things become dirty.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;把数据库相关操作扔给其他线程去执行，确保不会阻塞主线程就行了。&lt;/p&gt;

&lt;p&gt;但是真的就行了吗？&lt;/p&gt;

&lt;p&gt;在一个复杂的项目中，你永远不知道哪一行代码会调用同步代码阻塞主线程，&lt;code&gt;Racing condition just happens under pressure, and anything that may block will eventually block&lt;/code&gt;, 可能会发生的事情终将要发生。&lt;/p&gt;

&lt;p&gt;所以作者建议:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is usually the time when I suggest to separate the server into two parts: &amp;ldquo;normal blocking with ORM&amp;rdquo; and &amp;ldquo;asynchronous without ORM&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不过倒是想起另外一个问题了, 现在公司业务都是用的&lt;code&gt;gunicorn&lt;/code&gt;+&lt;code&gt;gevent&lt;/code&gt;, 这个内部是怎么解决这个问题的呢&lt;/p&gt;

&lt;p&gt;可以猜测一下：&lt;/p&gt;

&lt;p&gt;上面的例子造成死锁是因为有协程调用同步操作, 而gevent是通过&lt;code&gt;monkey_path&lt;/code&gt;的操作从底层改变所有请求的行为，就没有这个问题了。&lt;/p&gt;

&lt;p&gt;不过还有其他问题。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;monkey_patch&lt;/code&gt;针对Python代码有效，如果数据库连接器用的是c扩展，emmm&amp;hellip;可以大胆的猜测一下可能的bug&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;现代操作系统&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://python-gino.readthedocs.io/zh/latest/why.html#the-story&#34;&gt;https://python-gino.readthedocs.io/zh/latest/why.html#the-story&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>